// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayPal.Data;

#nullable disable

namespace PlayPal.Data.Migrations
{
    [DbContext(typeof(PlayPalDbContext))]
    [Migration("20230801071207_AddingProfilePicture")]
    partial class AddingProfilePicture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5356275-13f4-4d7c-8172-bbf054707e2f"),
                            ConcurrencyStamp = "60e85ee1-5b49-4665-9f28-01dac863ae66",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("c3caf211-8a76-4415-a74a-6b7f0a0b9d50"),
                            ConcurrencyStamp = "aae359f6-f2ff-4a67-a9c8-808a7eca8ced",
                            Name = "FieldOwner",
                            NormalizedName = "FIELDOWNER"
                        },
                        new
                        {
                            Id = new Guid("b333df2f-222c-4768-a9f5-0368b93aea47"),
                            ConcurrencyStamp = "289ed9de-26b3-4171-a886-37d7d24cb9b2",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "AdministratorId",
                            ClaimValue = "fd40991a-dd39-4ce0-9179-82740d6383ee",
                            UserId = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Name",
                            ClaimValue = "Ivan Ivanow",
                            UserId = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "FieldOwnerId",
                            ClaimValue = "568302c8-4561-4e7d-a796-1ae35b530c5f",
                            UserId = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Name",
                            ClaimValue = "Mr Georgi Georgiev",
                            UserId = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "PlayerId",
                            ClaimValue = "6276efc4-23ea-4440-9d4a-7b164a2c74a6",
                            UserId = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Name",
                            ClaimValue = "Player",
                            UserId = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "City",
                            ClaimValue = "Sofia",
                            UserId = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d"),
                            RoleId = new Guid("f5356275-13f4-4d7c-8172-bbf054707e2f")
                        },
                        new
                        {
                            UserId = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d"),
                            RoleId = new Guid("c3caf211-8a76-4415-a74a-6b7f0a0b9d50")
                        },
                        new
                        {
                            UserId = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d"),
                            RoleId = new Guid("b333df2f-222c-4768-a9f5-0368b93aea47")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayPal.Data.Models.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the Administrator profile");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The first name of the Administrator");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the Administrator");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, owning the administrator profile");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd40991a-dd39-4ce0-9179-82740d6383ee"),
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            UserId = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d")
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the ban");

                    b.Property<Guid>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the administrator, who issued th ban");

                    b.Property<DateTime>("BannedTo")
                        .HasColumnType("datetime2")
                        .HasComment("The date and hour, when the ban expires");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player, who has been banned");

                    b.Property<int>("Reason")
                        .HasColumnType("int")
                        .HasComment("The reason for the ban");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Field's identifier.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The address of the field (district, street, number)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the city where the field is located");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the field");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the field owner");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06921ef3-e09a-456d-92ef-aada394af8bb"),
                            Address = "str. Hristo Botev 36",
                            City = "Sofia",
                            IsDeleted = false,
                            Name = "Football Ground",
                            OwnerId = new Guid("568302c8-4561-4e7d-a796-1ae35b530c5f")
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.FieldOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Field owner's identifier.");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the company that owns the field");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Field owner's physical address for official correspondence");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The first name of the representive of the company that owns the field");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the representive of the company that owns the field");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasComment("The title of the representive");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, owning owner's profile");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("FieldOwners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("568302c8-4561-4e7d-a796-1ae35b530c5f"),
                            CompanyName = "BestCompany",
                            ContactAddress = "Sofia, str. Vasil Levski #11",
                            FirstName = "Georgi",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            Title = 0,
                            UserId = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d")
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game identifier");

                    b.Property<int>("AwayTeamGoalCount")
                        .HasColumnType("int")
                        .HasComment("The goals scored for the away team");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player who has created the game");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the ending time of the game");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the field, where the game is played");

                    b.Property<int>("HomeTeamGoalCount")
                        .HasColumnType("int")
                        .HasComment("The goals scored for the home team");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit")
                        .HasComment("Indecates if the game is processed by the creator after its over.");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the starting time of the game");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FieldId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The goal identifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the game in which the goal was scored");

                    b.Property<bool>("IsAutoGoal")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the goals is autogoal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The indentifier of the player, who scored the goal");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Message identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The content of the message");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, that has received the message");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit")
                        .HasComment("Marks if the message is seen by receiver");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, that has send the message");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows at what time the message is sent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The title of the message");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PendingPlayerGame", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the pending player");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the pending game");

                    b.HasKey("PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("PendingPlayersGames");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Player's identifier.");

                    b.Property<string>("CurrentCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current location of the player. Its used for finding nearby games.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The name, that player will be seen with by other users.");

                    b.Property<string>("NormalizedCurrentCity")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Normalized name of the player's city");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the preffered position of the player.");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, owning player's profile");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6276efc4-23ea-4440-9d4a-7b164a2c74a6"),
                            CurrentCity = "Sofia",
                            IsDeleted = false,
                            Name = "Player",
                            PositionId = new Guid("5a491d86-fc04-4359-aef9-feca2630e6bf"),
                            UserId = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d")
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayerTeam", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player from the team");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The indentifier of the team of the player");

                    b.HasKey("PlayerId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayersTeams");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayPalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the administrator profile, that is owned by this user.");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FieldOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the field owner profile, that is owned by this user.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this player profile is considered deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player profile, that is owned by this user.");

                    b.Property<string>("ProfilePictureId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The indentifier of the profile picture");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "658a89be-6c4b-4349-9a50-b5f4a332ce6c",
                            Email = "Administrator@test.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@TEST.COM",
                            NormalizedUserName = "ADMINISTRATOR@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJn5iT02Bz+NcBr5NIe7/9CZ7qEDiKnOQ29FcGwTOQIEPj60p0ezgocaRlbDKND4rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01a8f3d3-719f-4ef7-a950-c000d0e57013",
                            TwoFactorEnabled = false,
                            UserName = "Administrator@test.com"
                        },
                        new
                        {
                            Id = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "010182b0-b86a-400d-b5d7-abcd1a3498cc",
                            Email = "FieldOwner@test.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FIELDOWNER@TEST.COM",
                            NormalizedUserName = "FIELDOWNER@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKnZXLvfAiHR17GcyEvNGqYjE8gCiBGDwPckZcSELAoSAuxPYHh2rgC10/CsYrR+kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b695617-a1de-4d62-b786-107487261b24",
                            TwoFactorEnabled = false,
                            UserName = "FieldOwner@test.com"
                        },
                        new
                        {
                            Id = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20eb39db-5f73-4420-877d-868155e74cf0",
                            Email = "Player@test.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER@TEST.COM",
                            NormalizedUserName = "PLAYER@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPIJOd32fvAA4GzsZxk+qgHlOr/ivJxF4XMrZB8mOAf1Nkm5FnF8ofCpXTfT33ehbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3296e2bf-a6b4-4042-aa29-a881af8ff207",
                            TwoFactorEnabled = false,
                            UserName = "Player@test.com"
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the position");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The name of the postion");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a491d86-fc04-4359-aef9-feca2630e6bf"),
                            IsDeleted = false,
                            Name = "GoalKeeper"
                        },
                        new
                        {
                            Id = new Guid("6b6e1b10-baac-4f32-b276-21d5de82ac52"),
                            IsDeleted = false,
                            Name = "FieldPlayer"
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportedPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportingPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReportedPlayerId");

                    b.HasIndex("ReportingPlayerId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The indentifier of the team");

                    b.Property<Guid?>("AwayGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the away game, in which the team played");

                    b.Property<Guid?>("HomeGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the home game, in which the team played");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.HasKey("Id");

                    b.HasIndex("AwayGameId")
                        .IsUnique()
                        .HasFilter("[AwayGameId] IS NOT NULL");

                    b.HasIndex("HomeGameId")
                        .IsUnique()
                        .HasFilter("[HomeGameId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayPal.Data.Models.Administrator", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "User")
                        .WithOne("Administator")
                        .HasForeignKey("PlayPal.Data.Models.Administrator", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Ban", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Administrator", "Administrator")
                        .WithMany("Bans")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("Bans")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Field", b =>
                {
                    b.HasOne("PlayPal.Data.Models.FieldOwner", "Owner")
                        .WithMany("Fields")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PlayPal.Data.Models.FieldOwner", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "User")
                        .WithOne("Owner")
                        .HasForeignKey("PlayPal.Data.Models.FieldOwner", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Game", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Player", "Creator")
                        .WithMany("CreatedGames")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Field", "Field")
                        .WithMany("Games")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Goal", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Game", "Game")
                        .WithMany("Goals")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("Goals")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Message", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PendingPlayerGame", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Game", "Game")
                        .WithMany("PendingPlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("PendingGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Player", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "User")
                        .WithOne("Player")
                        .HasForeignKey("PlayPal.Data.Models.Player", "UserId");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayerTeam", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Report", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Player", "ReportedPlayer")
                        .WithMany("ReceivedReports")
                        .HasForeignKey("ReportedPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "ReportingPlayer")
                        .WithMany("SubmittedReports")
                        .HasForeignKey("ReportingPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportedPlayer");

                    b.Navigation("ReportingPlayer");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Team", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Game", "AwayGame")
                        .WithOne("AwayTeam")
                        .HasForeignKey("PlayPal.Data.Models.Team", "AwayGameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PlayPal.Data.Models.Game", "HomeGame")
                        .WithOne("HomeTeam")
                        .HasForeignKey("PlayPal.Data.Models.Team", "HomeGameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AwayGame");

                    b.Navigation("HomeGame");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Administrator", b =>
                {
                    b.Navigation("Bans");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Field", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("PlayPal.Data.Models.FieldOwner", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Game", b =>
                {
                    b.Navigation("AwayTeam")
                        .IsRequired();

                    b.Navigation("Goals");

                    b.Navigation("HomeTeam")
                        .IsRequired();

                    b.Navigation("PendingPlayers");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Player", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("CreatedGames");

                    b.Navigation("Goals");

                    b.Navigation("PendingGames");

                    b.Navigation("ReceivedReports");

                    b.Navigation("SubmittedReports");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayPalUser", b =>
                {
                    b.Navigation("Administator");

                    b.Navigation("Owner");

                    b.Navigation("Player");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SendMessages");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
