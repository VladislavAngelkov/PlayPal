// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayPal.Data;

#nullable disable

namespace PlayPal.Data.Migrations
{
    [DbContext(typeof(PlayPalDbContext))]
    partial class PlayPalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d"),
                            RoleId = new Guid("f5356275-13f4-4d7c-8172-bbf054707e2f")
                        },
                        new
                        {
                            UserId = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d"),
                            RoleId = new Guid("c3caf211-8a76-4415-a74a-6b7f0a0b9d50")
                        },
                        new
                        {
                            UserId = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d"),
                            RoleId = new Guid("b333df2f-222c-4768-a9f5-0368b93aea47")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayPal.Data.Models.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the Administrator profile");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this administrator profile is considered deleted");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, owning the administrator profile");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the ban");

                    b.Property<Guid>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the administrator, who issued th ban");

                    b.Property<DateTime>("BannedTo")
                        .HasColumnType("datetime2")
                        .HasComment("The date and hour, when the ban expires");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this ban is considered deleted");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player, who has been banned");

                    b.Property<int>("Reason")
                        .HasColumnType("int")
                        .HasComment("The reason for the ban");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Field's identifier.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The address of the field (district, street, number)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the city where the field is located");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this field record is considered deleted");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the field owner");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("PlayPal.Data.Models.FieldOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Field owner's identifier.");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Field owner's physical address for official correspondence");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this field owner profile is considered deleted");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, owning owner's profile");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FieldOwners");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game identifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player who has created the game");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the ending time of the game");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the field, where the game is played");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this game is considered deleted");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the starting time of the game");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FieldId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The goal identifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the game in which the goal was scored");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this goal is considered deleted");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The indentifier of the player, who scored the goal");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Message identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The content of the message");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this message is considered deleted");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, that has received the message");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, that has send the message");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PendingPlayerGame", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the pending player");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the pending game");

                    b.HasKey("PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("PendingPlayersGames");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Player's identifier.");

                    b.Property<string>("CurrentCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current location of the player. Its used for finding nearby games.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this player profile is considered deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The name, that player will be seen with by other users.");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasComment("The preffered position of the player.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, owning player's profile");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayerTeam", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player from the team");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The indentifier of the team of the player");

                    b.HasKey("PlayerId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayersTeams");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayPalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5356275-13f4-4d7c-8172-bbf054707e2f"),
                            ConcurrencyStamp = "c06f4ced-1a74-4d67-815c-164831843256",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c3caf211-8a76-4415-a74a-6b7f0a0b9d50"),
                            ConcurrencyStamp = "e7631731-d800-43b5-95ec-7543c33cde3f",
                            Name = "FieldOwner",
                            NormalizedName = "FIELDOWNER"
                        },
                        new
                        {
                            Id = new Guid("b333df2f-222c-4768-a9f5-0368b93aea47"),
                            ConcurrencyStamp = "7712b37c-2624-4115-ae23-5864bf4020b7",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayPalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the administrator profile, that is owned by this user.");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this player profile is considered deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the field owner profile, that is owned by this user.");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the player profile, that is owned by this user.");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a641cdf-8c28-485f-b22a-3603c6df7a3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecc1bbf7-8d81-44ca-9f9d-0a707c00322b",
                            Email = "Administrator@test.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@TEST.COM",
                            NormalizedUserName = "ADMINISTRATOR@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHon03T/gaj7ElCT64LenbaxPOZEesadU0KuHyR7IkRnRXnnnXMlYvB1iLvvpHoKXw==",
                            PhoneNumberConfirmed = false,
                            PlayerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            SecurityStamp = "944aae11-af63-4894-ba96-2c1a67baf28f",
                            TwoFactorEnabled = false,
                            UserName = "Administrator@test.com"
                        },
                        new
                        {
                            Id = new Guid("84b6df4e-b349-495e-a9e1-8541de1f2e2d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61a3fe97-7f8b-4255-8685-2bbd9a38a3cc",
                            Email = "FieldOwner@test.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FIELDOWNER@TEST.COM",
                            NormalizedUserName = "FIELDOWNER@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJlNQWyr496OnCLGXfElJS2AYD7EFNRcgkB0rjcdY6dbQEbzvKtCC97Hucu1CU3OHA==",
                            PhoneNumberConfirmed = false,
                            PlayerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            SecurityStamp = "b9d8ebd5-f5d9-4c01-acc9-03a06ec59b01",
                            TwoFactorEnabled = false,
                            UserName = "FieldOwner@test.com"
                        },
                        new
                        {
                            Id = new Guid("ec70c161-fc76-4b29-b3dc-03fdd605bf0d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdbf20b2-b8ea-4c4f-8df1-58c56e170972",
                            Email = "Player@test.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER@TEST.COM",
                            NormalizedUserName = "PLAYER@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLSTfxmbQwWzXV3bQPMP72z82DRVrlpdSb7ZwKElR/naq84CI5wZNgHaQexeHXyaw==",
                            PhoneNumberConfirmed = false,
                            PlayerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            SecurityStamp = "97835b9b-4b17-4701-9a11-2d6c15afe728",
                            TwoFactorEnabled = false,
                            UserName = "Player@test.com"
                        });
                });

            modelBuilder.Entity("PlayPal.Data.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The indentifier of the team");

                    b.Property<Guid?>("AwayGameID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the away game, in which the team played");

                    b.Property<Guid?>("HomeGameID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the home game, in which the team played");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if this team is considered deleted");

                    b.HasKey("Id");

                    b.HasIndex("AwayGameID")
                        .IsUnique();

                    b.HasIndex("HomeGameID")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayPal.Data.Models.Administrator", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "User")
                        .WithOne("Administator")
                        .HasForeignKey("PlayPal.Data.Models.Administrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Ban", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Administrator", "Administrator")
                        .WithMany("Bans")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("Bans")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Field", b =>
                {
                    b.HasOne("PlayPal.Data.Models.FieldOwner", "Owner")
                        .WithMany("Fields")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PlayPal.Data.Models.FieldOwner", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "User")
                        .WithOne("Owner")
                        .HasForeignKey("PlayPal.Data.Models.FieldOwner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Game", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Player", "Creator")
                        .WithMany("CreatedGames")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Goal", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Game", "Game")
                        .WithMany("Goals")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("Goals")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Message", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PendingPlayerGame", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Game", "Game")
                        .WithMany("PendingPlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("PendingGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Player", b =>
                {
                    b.HasOne("PlayPal.Data.Models.PlayPalUser", "User")
                        .WithOne("Player")
                        .HasForeignKey("PlayPal.Data.Models.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayerTeam", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Player", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Team", b =>
                {
                    b.HasOne("PlayPal.Data.Models.Game", "AwayGame")
                        .WithOne("AwayTeam")
                        .HasForeignKey("PlayPal.Data.Models.Team", "AwayGameID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayPal.Data.Models.Game", "HomeGame")
                        .WithOne("HomeTeam")
                        .HasForeignKey("PlayPal.Data.Models.Team", "HomeGameID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AwayGame");

                    b.Navigation("HomeGame");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Administrator", b =>
                {
                    b.Navigation("Bans");
                });

            modelBuilder.Entity("PlayPal.Data.Models.FieldOwner", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Game", b =>
                {
                    b.Navigation("AwayTeam")
                        .IsRequired();

                    b.Navigation("Goals");

                    b.Navigation("HomeTeam")
                        .IsRequired();

                    b.Navigation("PendingPlayers");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Player", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("CreatedGames");

                    b.Navigation("Goals");

                    b.Navigation("PendingGames");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PlayPal.Data.Models.PlayPalUser", b =>
                {
                    b.Navigation("Administator");

                    b.Navigation("Owner");

                    b.Navigation("Player")
                        .IsRequired();

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SendMessages");
                });

            modelBuilder.Entity("PlayPal.Data.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
